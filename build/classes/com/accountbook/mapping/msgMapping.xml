<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.accountbook.dao.MessageDao" >
  <resultMap id="map" type="com.accountbook.model.Message" >
    <id column="id" property="id" jdbcType="VARCHAR" />
    <result column="from_id" property="fromId" jdbcType="VARCHAR" />
    <result column="to_id" property="toId" jdbcType="VARCHAR" />
    <result column="type" property="type" jdbcType="TINYINT" />
    <result column="content" property="content" jdbcType="VARCHAR" />
    <result column="time" property="time" jdbcType="TIMESTAMP" />
    <result column="state" property="state" jdbcType="TINYINT" />
  </resultMap>
  
  <resultMap id="stateMap" type="com.accountbook.model.MessageState" >
    <id column="id" property="id" jdbcType="BIGINT" />
    <result column="msg_id" property="msgId" jdbcType="VARCHAR" />
    <result column="pid" property="pid" jdbcType="VARCHAR" />
    <result column="state" property="state" jdbcType="TINYINT" />
  </resultMap>
  
  
  	<select id="queryMsg" parameterType="string" resultMap="map">
		SELECT * FROM message WHERE id = #{id};
	</select>
  	<select id="queryAccountMsgs" parameterType="string" resultMap="map">
		 #查询账单相关的消息
		 SELECT * FROM message WHERE 
			content LIKE #{0} OR 
			content LIKE #{1} OR
			content LIKE #{2}
	</select>
  
  
  
  
  
  
  <!-- 查询聊天列表:每个用户的最后一条消息 -->
  	<select id="queryChatList" parameterType="String" resultMap="map">
		SELECT * FROM message WHERE id IN(
		SELECT MAX(id) FROM (
		(SELECT a.id,a.from_id,a.to_id,a.type,a.content,a.time,b.state FROM message AS a 
		LEFT JOIN message_state AS b ON a.id=b.msg_id AND b.pid=#{userId}
		WHERE  from_id=#{userId} AND TYPE=3 AND state!=2
		UNION
		SELECT a.id,a.from_id,a.to_id,a.type,a.content,a.time,b.state FROM message AS a 
		LEFT JOIN message_state AS b ON a.id=b.msg_id AND b.pid=#{userId}
		WHERE  to_id=#{userId} AND TYPE=3 AND state!=2)
		
		)AS b GROUP BY b.from_id,b.to_id
		)
		
		 UNION 
		 
		 SELECT * FROM ( 
		 SELECT a.id,a.from_id,a.to_id,a.type,a.content,a.time FROM message AS a 
		LEFT JOIN message_state AS b ON a.id=b.msg_id AND b.pid=#{userId}
		WHERE to_id=#{userId}
		 AND (TYPE=1 OR TYPE=2) AND state!=2
		 ORDER BY TIME DESC LIMIT 0,1) AS b
		 
		 ORDER BY TIME DESC
	</select>
  
  
	
	<select id="queryUserMsgs" parameterType="map" resultMap="map">
				
		SELECT * FROM 
		(SELECT a.id,a.from_id,a.to_id,a.type,a.content,a.time,b.state FROM message AS a LEFT JOIN message_state AS b ON a.id=b.msg_id AND b.pid=#{user1Id}
		WHERE TYPE=3 AND state!=2 AND
		((a.from_id=#{user1Id} AND a.to_id=#{user2Id}) OR
		(a.from_id=#{user2Id} AND a.to_id=#{user1Id})) ORDER BY TIME DESC LIMIT #{ls},#{lc})AS a
		ORDER BY TIME ASC
	</select>
	<select id="queryInviteMsgs" parameterType="map" resultMap="map">
		SELECT a.id,a.from_id,a.to_id,a.type,a.content,a.time,b.state FROM message AS a
	LEFT JOIN message_state AS b ON a.id=b.msg_id AND b.pid=#{userId}
	WHERE to_id =#{userId} AND state!=2 AND (TYPE=1 OR TYPE=2) ORDER BY TIME DESC LIMIT #{ls},#{lc};
	</select>
	
	<select id="isRepeatInvite" parameterType="String" resultType="Boolean">
		SELECT COUNT(*) FROM message AS a 
		LEFT JOIN message_state AS b ON a.id=b.msg_id AND b.pid=#{0}
		WHERE from_id =#{0} AND to_id =#{1} AND (TYPE=1 OR TYPE=2) AND (state!=2 AND state!=12);
	</select>
	
	
	
	

	
	
	
	
	<select id="queryUserUnreadCount" parameterType="map" resultType="integer">
		SELECT COUNT(*) FROM message AS a LEFT JOIN message_state AS b ON a.id=b.msg_id AND b.pid=#{findId} 
		WHERE (  (from_id=#{user1Id} AND to_id=#{user2Id}) OR (from_id=#{user2Id} AND to_id=#{user1Id}) ) AND state=0 AND TYPE=3;
	</select>
	
	<select id="queryInviteUnreadCount" parameterType="String" resultType="integer">
		SELECT COUNT(*) FROM message AS a 
		LEFT JOIN message_state AS b ON a.id=b.msg_id AND b.pid=#{toId}
		WHERE to_id = #{toId} AND (TYPE=1 OR TYPE=2) AND state=0;
	</select>
	
	<!-- 插入 -->
	<insert id="insert" parameterType="com.accountbook.model.Message">
		insert into message values(#{id},#{fromId},#{toId},#{type},#{content},#{time})
	</insert>
	
	<!-- 插入消息状态 -->
	<insert id="insertState" parameterType="com.accountbook.model.MessageState">
		insert into message_state values(null,#{msgId},#{pid},#{state})
	</insert>
	
	<!-- 更新 -->
	<update id="updateStatus" parameterType="map">
		UPDATE message_state SET state=#{state} WHERE msg_id=#{msgId} AND pid=#{pid}
	</update>
	
	<!-- 和某个帐友的所有消息标记为某个状态 -->
	<update id="updateStatusBatch" parameterType="map">
	
		UPDATE message_state SET state=#{state}
		WHERE id IN (
		SELECT * FROM (
		(SELECT b.id FROM message AS a 
		LEFT JOIN message_state AS b ON a.id=b.msg_id AND b.pid=#{user1Id}
		WHERE (from_id=#{user1Id}
		AND to_id=#{user2Id}) OR (from_id=#{user2Id}
		AND to_id=#{user1Id})
		AND state!=2 and type=3
		)AS a ))
	
	</update>
	
	<update id="updateStatusBatchForInvite" parameterType="map">
		UPDATE message_state SET state=#{state}
		WHERE id IN (
		SELECT * FROM (
		(SELECT b.id FROM message AS a 
		LEFT JOIN message_state AS b ON a.id=b.msg_id AND b.pid=#{userId}
		WHERE  TYPE!=3
		)AS a )
		)
	</update>
	
	
	<!-- 删除 -->
	<delete id="delete" parameterType="string">
		delete from message where id=#{id};
	</delete>
	<!-- 删除消息状态 -->
	<delete id="deleteState" parameterType="string">
		delete from message_state where msg_id=#{id};
	</delete>
</mapper>